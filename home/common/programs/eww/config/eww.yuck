(defpoll time           :interval "1s" "date '+%H:%M'")
(defpoll date           :interval "60s" "date '+%a %d %b'")
(defpoll volume         :interval "1s" "wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{print $2 * 100}'")
(defpoll music_art      :interval "5s" "~/.config/eww/scripts/music.sh --art")
(defpoll music_title    :interval "5s" "~/.config/eww/scripts/music.sh --title")
(defpoll music_artist   :interval "5s" "~/.config/eww/scripts/music.sh --artist")
(defpoll music_status   :interval "5s" "~/.config/eww/scripts/music.sh --status")
(defpoll memory         :interval "15s" "free | awk '/Mem/ {print int($3/$2 * 100 + 0.5)}'")


(deflisten workspaces_listen_0 "~/.config/eww/scripts/workspace.sh 0")
(defwidget workspaces_0 []
  (literal :content workspaces_listen_0))

(deflisten workspaces_listen_1 "~/.config/eww/scripts/workspace.sh 1")
(defwidget workspaces_1 []
  (literal :content workspaces_listen_1))

(defvar volume_reveal false)

(defvar eww "/usr/bin/env eww -c $HOME/.config/eww/")

(defwidget center[]
  (box :orientation "h" :space-evenly "false" :halign "center"
    (music)
    ))

(defwidget right[]
  (box :orientation "h" :space-evenly "false" :halign "end" :spacing 15
    (systray :orientation "h" :icon-size 15 :spacing 10)
    (system)
    (volume)
    (date)
    (clock)
    ))

(defwidget music []
  (box :orientation "h" :hexpand "true" :space-evenly "false" :visible music_status
    (box :hexpand "true" :style "background-image: url('${music_art}');" :class "music_art")
    (box :hexpand "true" "${music_title} ")
    (box :hexpand "true" " - ${music_artist}")))

(defwidget system []
  (box
    :spacing 6
    (circular-progress
      :class "system_bar"
      :value "${EWW_CPU.avg}"
      :tooltip "CPU ${round(EWW_CPU.avg, 1)}%"
      :thickness 4
      (box :class "system_icon" "" ))

    (circular-progress
      :class "system_bar"
      :value "${EWW_RAM.used_mem_perc}"
      :tooltip "RAM ${round(EWW_RAM.used_mem_perc, 1)}%"
      :thickness 4
      (box :class "system_icon" "" ))))

(defwidget volume []
  (eventbox
    :onhover      "${eww} update volume_reveal=true"
    :onhoverlost  "${eww} update volume_reveal=false"
    (box
      :orientation "h"
      :space-evenly "false"
      :spacing 10
      (button :onclick 'echo test > $HOME/test' "")
      (revealer
        :transition "slideleft"
        :duration "300ms"
        :reveal volume_reveal
        (scale
          :class "volbar"
          :orientation "h"
          :max 100
          :min 0
          :value volume
          :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ $(awk \"BEGIN {print {} / 100}\")"
          )))))

(defwidget clock []
  (box "${time}"))

(defwidget date []
  (box "${date}"))

(defwidget bar_container_0 []
  (box :orientation "h"
    (box :orientation "h" :space-evenly "false"
      (workspaces_0)
      )
    (center)
    (right)
    ))

(defwidget bar_container_1 []
  (box :orientation "h"
    (box :orientation "h" :space-evenly "false"
      (workspaces_1)
      )
    (center)
    (right)
    ))

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :namespace "bar"
  :exclusive "true"
  :geometry (geometry :x "0%"
  :y "0%"
  :width "100%"
  :height "0px"
  :anchor "bottom center")
  :reserve (struts :side "bottom" :distance "4%")
  (bar_container_0))

(defwindow bar-second
  :monitor 1
  :windowtype "dock"
  :namespace "bar"
  :exclusive "true"
  :geometry (geometry :x "0%"
  :y "0%"
  :width "100%"
  :height "0px"
  :anchor "bottom center")
  :reserve (struts :side "bottom" :distance "4%")
  (bar_container_1))

